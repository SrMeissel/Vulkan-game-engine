cmake_minimum_required(VERSION 3.5)

project(Vulkan-Engine VERSION 1.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)

file(GLOB_RECURSE SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp ${PROJECT_SOURCE_DIR}/*.hpp)

add_subdirectory(${CMAKE_SOURCE_DIR}/libs/glfw-3.3.8)
add_subdirectory(${CMAKE_SOURCE_DIR}/libs/tinyobjloader-release)

find_package(Vulkan REQUIRED)

add_executable(engine
    ${SOURCES}
    ) 

target_include_directories(engine PUBLIC
    ${PROJECT_SOURCE_DIR}/src    
)

target_link_libraries(engine glfw)
target_link_libraries(engine tinyobjloader)
target_link_libraries(engine Vulkan::Vulkan)

# Build Shaders !!!
find_program(GLSL_VALIDATOR glslangValidator HINTS
    ${Vulkan_GLSLANG_VALIDATOR_EXECUTABLE}
    $ENV{VULKAN_SDK}/bin/
    $ENV{VULKAN_SDK}/bin32/
)

file(GLOB_RECURSE GLSL_SOURCE_FILES
    "${PROJECT_SOURCE_DIR}/shaders/*.vert"
    "${PROJECT_SOURCE_DIR}/shaders/*.frag"
)

foreach(GLSL ${GLSL_SOURCE_FILES})
  message(STATUS "BUILDING SHADER")
  get_filename_component(FILE_NAME ${GLSL} NAME)
  set(SPIRV "${PROJECT_SOURCE_DIR}/shaders/${FILE_NAME}.spv")
  message(STATUS ${GLSL})
  add_custom_command(
    OUTPUT ${SPIRV}
    COMMAND${GLSL_VALIDATOR} -V ${GLSL} -o ${SPIRV}
    DEPENDS ${GLSL})
  list(APPEND SPIRV_BINARY_FILES ${SPIRV})
endforeach(GLSL)

add_custom_target(
    Shaders 
    DEPENDS ${SPIRV_BINARY_FILES}
    )
